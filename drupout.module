<?php

/**
 * @file
 * Module that allows creating and editing Speakout campaigns from a webform
 */

/**
 * Simple slugifiyer
 * Replaces all non-slug characters with $sep
 */
function drupout_slugify($str, $sep='-') {
  return strtolower(preg_replace('/[^a-zA-Z0-9-_]+/', $sep, $str));
}

/**
 * Determine the campaign URL from its title and update
 * `speakout_link` value in the submission
 */
function drupout_webform_submission_presave($node, &$submission) {
  foreach ($node->webform['components'] as $cid => $component) {
    if ($component['form_key'] == 'speakout_link') {
      $link_cid = $cid;
    }
    if ($component['form_key'] == 'civicrm_1_activity_1_activity_subject') {
      $title = $submission->data[$cid][0];  
    }
  }
  $root_endpoint = variable_get('drupout_endpoint', 'http://localhost:3000');
  $slug = drupout_slugify($title);
  $submission->data[$link_cid][0] = $root_endpoint . '/campaigns/' . $slug;
}

/**
 * Reads the template ids from the settings
 * and returns an array($lang => $id)
 */
function drupout_language_templates() {
  $templates_str = variable_get('drupout_speakout_templates');
  $langs = explode(',', $templates_str);
  $templates = array();
  foreach ($langs as $lang) {
    list($l, $id) = explode(':', $lang);
    $templates[$l] = $id;
  }
  return $templates;
}

/**
 * Returns an associative array($key => value) of the submission
 */
function drupout_params($node, $submission) {
  $params = array();
  foreach ($node->webform['components'] as $cid => $component) {
    $params[$component['form_key']] = $submission->data[$cid][0];  
  }
  return $params;
}

function drupout_template_id($params) {
  $templates = drupout_language_templates();
  $lang = $params['language'];
  if (isset($templates[$lang])) {
    return $templates[$lang];
  } else {
    return NULL;
  }
}

/**
 * Converts the submitted value into a JSON object that can be sent to Speakout
 */
function drupout_form2json($params) {
  $title = $params['civicrm_1_activity_1_activity_subject'];
  $date_prefix = date('Ym');
  $language = strtoupper($params['language']);
  $img_file = file_load($params['add_an_image']);
  $initiator = $params['civicrm_1_contact_1_contact_first_name'].' '.$params['civicrm_1_contact_1_contact_last_name'];
  $jsonData = array(
    'name' => $title,
    'slug' => drupout_slugify($title),
    'internal_name' => $date_prefix . '-' . drupout_slugify($title, '_') . '-' . $language,
    'image_url' => file_create_url($img_file->uri),
    'description' => $params['add_texts_for_social_media_shares'],
    'twitter_share_text' => $params['add_texts_for_ttwitter'],
    'decisions_attr' => array(
      'display_name' => $params['who_are_you_addressing_who_in_the_european_union_can_make_this_happen']
    ),
    'variables' => array(
      'sign_advice' => array(
        'initiator' => $initiator,
        'petition' => $params['what_do_you_want_them_to_do'],
        'why_important' => $params['why_is_this_important']
      )
    )
  );

  return $jsonData;
}

/**
 * Builds and sends the JSON to Speakout API
 */ 
function drupout_webform_submission_insert($node, $submission) {
  if ($node->nid == variable_get('drupout_submission_node')) {
    $params = drupout_params($node, $submission);
    if ($params['ready_to_publish'] == '1') {
      _drupout_create($node, $submission, $params);
    }
  }
}

function drupout_webform_submission_update($node, $submission) {
  if ($node->nid == variable_get('drupout_submission_node')) {
    $params = drupout_params($node, $submission);
    if ($params['ready_to_publish'] == '1') {
      if ($params['campaign_id']) {
        _drupout_update($params);
      } else {
        _drupout_create($node, $submission, $params);
      }
    }
  }
}

function _drupout_create($node, $submission, $params) {
  $result = _drupout_call_template($params, 'clone');
  if ($result) {
    $camp = json_decode($result['response']);
    foreach ($node->webform['components'] as $cid => $component) {
      if ($component['form_key'] == 'campaign_id') {
        $camp_cid = $cid;
        break;
      }
    }
    $data = array(
      'nid' => $node->webform['nid'],
      'sid' => $submission->sid,
      'cid' => $camp_cid,
      'no' => 0,
      'data' => $camp->id,
    );
    drupal_write_record('webform_submitted_data', $data, array('nid', 'sid', 'cid', 'no'));
  }
}

function _drupout_update($params) {
  $result = _drupout_call_template($params, 'render');
  if ($result) {
    $rendered = json_decode($result['response'], true);
    $attrs = array_diff(array_keys($result['input']), array('variables'));
    $attrs = array_merge($attrs, array_keys($result['input']['variables']));
    $jsonData = array_intersect_key($rendered, array_flip($attrs));

    $user = variable_get('drupout_speakout_user');
    $password = variable_get('drupout_speakout_password');
    $url = _drupout_api_url("campaigns/".$params['campaign_id']);
    $result = _drupout_curl($url, $jsonData, array(CURLOPT_USERPWD => "$user:$password", CURLOPT_CUSTOMREQUEST => 'PUT'));
    if ($result) {
      $call_info = $result['info'];
      if ($call_info['http_code'] != 200) {
        watchdog('drupout', "Unexpected status code: ".print_r($call_info, true));
      }
    }
  }
}

function _drupout_call_template($params, $action) {
  $template_id = drupout_template_id($params);
  if ($template_id != NULL) {
    $jsonData = drupout_form2json($params);
    if ($action == 'clone') {
      $expected_status = 201;
    } else {
      $expected_status = 200;
      unset($jsonData['decisions_attr']);
    }

    $user = variable_get('drupout_speakout_user');
    $password = variable_get('drupout_speakout_password');
    $url = _drupout_api_url("campaigns/$template_id/$action");
    $result = _drupout_curl($url, $jsonData, array(CURLOPT_USERPWD => "$user:$password"));
    if ($result) {
      $call_info = $result['info'];
      if ($call_info['http_code'] != $expected_status) {
        watchdog('drupout', "Unexpected status code: ".print_r($call_info, true));
      } else {
        return $result;
      }
    }
  } else {
    watchdog('drupout', "Cannot $action Speakout template because " . $params['language'] . " is not supported.");
  }
  return false;
}

function _drupout_api_url($path) {
  $root_endpoint = variable_get('drupout_endpoint', 'http://localhost:3000');
  return "$root_endpoint/api/v1/$path";
}

function _drupout_curl($url, $data, $opts = NULL) {
  $ch = curl_init($url);

  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json')); 
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  $jsonDataEncoded = json_encode($data);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonDataEncoded);
  curl_setopt_array($ch, $opts);
   
  $response = curl_exec($ch);
  if ($response !== false) {
    $call_info = curl_getinfo($ch);
    $result = array('input' => $data, 'response' => $response, 'info' => $call_info);
  } else {
    $error = curl_error($ch);
    watchdog('drupout', "Unable to call $url: $error");
    $result = false;
  }

  curl_close($ch);
  return $result;
}

/**
 * Creates the item in the admin main page
 */
function drupout_menu() {
  $items = array();

  $items['admin/config/content/drupout'] = array(
    'title' => "Drupout settings",
    'description' => "Settings to create Speakout campaigns from Drupal",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupout_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM
  );

  return $items;
}

/**
 * Generates the config form
 */
function drupout_settings_form($form, &$form_state) {
  $form['drupout_submission_node'] = array(
    '#type' => 'textfield',
    '#title' => t('Submission node'),
    '#default_value' => variable_get('drupout_submission_node'),
    '#description' => t('Drupal node id with the webform to create/edit campaigns'),
    '#required' => true
  );
  $form['drupout_endpoint'] = array(
    '#type' => 'textfield',
    '#title' => t('Speakout URL'),
    '#default_value' => variable_get('drupout_endpoint', 'http://localhost:3000'),
    '#description' => t('URL to the Speakout application, without trailing slash'),
    '#required' => true
  );
  $form['drupout_speakout_user'] = array(
    '#type' => 'textfield',
    '#title' => t('Speakout user'),
    '#default_value' => variable_get('drupout_speakout_user'),
    '#description' => t('Speakout user'),
    '#required' => true
  );
  $form['drupout_speakout_password'] = array(
    '#type' => 'password',
    '#title' => t('Speakout password'),
    '#description' => t('Speakout password, leave blank if unchanged'),
    '#value_callback' => 'drupout_pwd_value'
  );
  $form['drupout_speakout_templates'] = array(
    '#type' => 'textfield',
    '#title' => t('Speakout templates'),
    '#default_value' => variable_get('drupout_speakout_templates'),
    '#description' => t('Speakout templates'),
    '#required' => true
  );

  return system_settings_form($form);
}

function drupout_pwd_value($element, $input = FALSE, &$form_state) {
  if (!$input) {
    $input = variable_get('drupout_speakout_password');
  }
  return $input;
}

/**
 * Returns the supported language options according to settings
 */
function drupout_youmove_languages() {
  $languages = array(
    'da' => t('Danish'),
    'de' => t('German'),
    'el' => t('Greek'),
    'en' => t('English'),
    'es' => t('Spanish'),
    'fr' => t('French'),
    'hu' => t('Hungarian'),
    'it' => t('Italian'),
    'nl' => t('Dutch'),
    'pl' => t('Polish'),
    'pt' => t('Portuguese'),
  );
  $available = drupout_language_templates();
  return array_intersect_key($languages, $available);
}

function drupout_webform_select_options_info() {
  $items = array();

  $items['youmove_langs'] = array(
    'title' => t('Youmove languages'), 
    'options callback' => 'drupout_youmove_languages', 
  );

  return $items;
}

function drupout_token_info() {
  $info['types']['drupout'] = array(
    'name' => 'Drupout',
    'needs-data' => 'submission',
  );
  $info['tokens']['submission']['drupout'] = array(
    'name' => 'Drupout',
    'type' => 'drupout'
  );
  $info['tokens']['drupout']['speakout_link'] = array(
    'name' => 'Speakout URL',
    'description' => t('A text that gives the link to the Speakout campaign if available, or how to get it.'),
  );

  return $info;
}

function drupout_tokens($type, $tokens, $data, $options) {
  $replacements = array();
  if ($type == 'submission') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'drupout:speakout_link':
	  $node = $data['node'];
	  $submission = $data['webform-submission'];
	  $params = drupout_params($node, $submission);
	  $template_id = drupout_template_id($params);
	  if ($template_id != NULL) {
	    $replacement = token_replace(t('Here it is: [submission:values:speakout_link]. Please get in touch if you want to add or change content of your petition.'), $data);
	  } else {
	    $replacement = t('Soon we will get in touch to keep moving forward and make sure your campaign is a success.');
	  }
          $replacements[$original] = $replacement;
          break;
      }
    }
  }
  return $replacements;
}
