<?php

/**
 * @file
 * Module that allows creating and editing Speakout campaigns from a webform
 */

/**
 * Simple slugifiyer
 * Replaces all non-slug characters with $sep
 */
function drupout_slugify($str, $sep='-') {
  return strtolower(preg_replace('/[^a-zA-Z0-9-_]+/', $sep, $str));
}

/**
 * Determine the campaign URL from its title and update
 * `speakout_link` value in the submission
 */
function drupout_webform_submission_presave($node, &$submission) {
  if (_drupout_is_node_enabled($node)) {
    $data = drupout_params($node, $submission);

    if (_drupout_ready_to_publish($data)) {
      $title = $data['civicrm_1_activity_1_activity_subject'];
      if (empty($data['speakout_link'])) {
        $submission->data[$data['speakout_link_cid']][0] = _drupout_speakout_link($title);
      }
      $link = $submission->data[$data['speakout_link_cid']][0];

      if (empty(trim($data['add_texts_for_ttwitter']))) {
        $twitter_msg = "$title - " . t("Join me & sign the petition!");
        $submission->data[$data['add_texts_for_ttwitter_cid']][0] = $twitter_msg;
      }

      if (empty(trim($data['add_texts_for_social_media_shares']))) {
        $fb_msg = substr($data['why_is_this_important'], 0, 300);
        $submission->data[$data['add_texts_for_social_media_shares_cid']][0] = $fb_msg;
      }
    }
  }
}

function _drupout_speakout_link($title) {
  $root_endpoint = variable_get('drupout_endpoint', 'http://localhost:3000');
  $slug = drupout_slugify($title);
  return $root_endpoint . '/campaigns/' . $slug;
}

/**
 * Reads the template ids from the settings
 * and returns an array($lang => $id)
 */
function drupout_language_templates() {
  $templates_str = variable_get('drupout_speakout_templates');
  $langs = explode(',', $templates_str);
  $templates = array();
  foreach ($langs as $lang) {
    list($l, $id) = explode(':', $lang);
    $templates[$l] = $id;
  }
  return $templates;
}

function drupout_template_id($lang) {
  $templates = drupout_language_templates();
  if (isset($templates[$lang])) {
    return $templates[$lang];
  } else {
    return NULL;
  }
}

/**
 * Returns an associative array($form_key => value) of a webform submission
 */
function drupout_params($node, $submission) {
  $params = array();
  foreach ($node->webform['components'] as $cid => $component) {
    $key = $component['form_key'];
    $params[$key] = $submission->data[$cid][0];
    $params["{$key}_cid"] = $cid;
  }
  return $params;
}

/**
 * Recursively scan the submitted data of a form
 * and returns an associative array($form_key => $value)
 */
function _drupout_submitted($submitted) {
  $result = array();
  foreach ($submitted as $key => $value) {
    if (is_array($value) and isset($value['#type'])) {
      if ($value['#type'] == 'fieldset') {
        $result = array_merge($result, _drupout_submitted($value));
      }
      else {
        $result[$key] = $value['#value'];
      }
    }
  }
  return $result;
}

/**
 * Converts the submitted value into a JSON object that can be sent to Speakout
 */
function drupout_form2json($params) {
  $title = $params['civicrm_1_activity_1_activity_subject'];
  $date_prefix = date('Ym');
  $language = strtoupper($params['language']);
  $img_file = file_load($params['add_an_image']);
  $p_org_name = 'civicrm_2_contact_1_contact_organization_name';
  if (isset($params[$p_org_name]) && trim($params[$p_org_name])) {
    $initiator = $params[$p_org_name];
    $layout_id = variable_get('drupout_org_layout');
  } else {
    $initiator = $params['civicrm_1_contact_1_contact_first_name'].' '.$params['civicrm_1_contact_1_contact_last_name'];
    $layout_id = NULL;
  }
  $jsonData = array(
    'name' => $title,
    'slug' => drupout_slugify($title),
    'internal_name' => $date_prefix . '-' . drupout_slugify($title, '_') . '-' . $language,
    'image_url' => $img_file->uri ? file_create_url($img_file->uri) : '',
    'description' => $params['add_texts_for_social_media_shares'],
    'twitter_share_text' => $params['add_texts_for_ttwitter'],
    'custom_layout_id' => $layout_id,
    'decisions_attr' => array(
      'display_name' => $params['who_are_you_addressing_who_in_the_european_union_can_make_this_happen']
    ),
    'render_context' => array(
      'sign_advice' => array(
        'initiator' => $initiator,
        'petition' => nl2br(check_plain($params['what_do_you_want_them_to_do'])),
        'why_important' => nl2br(check_plain($params['why_is_this_important']))
      )
    )
  );

  return $jsonData;
}

/**
 * If the submission is ready to publish, create the Speakout campaign
 */
function drupout_webform_submission_insert($node, $submission) {
  if (_drupout_is_node_enabled($node)) {
    $params = drupout_params($node, $submission);
    if (_drupout_ready_to_publish($params)) {
      _drupout_create($node, $submission, $params);
    }
  }
}

/**
 * If the campaign has already been published, updates it.
 * Otherwise if it is ready to publish, create it.
 */
function drupout_webform_submission_update($node, $submission) {
  if (_drupout_is_node_enabled($node)) {
    $params = drupout_params($node, $submission);
    if (_drupout_ready_to_publish($params)) {
      if ($params['campaign_id']) {
        _drupout_update($params);
      } else {
        _drupout_create($node, $submission, $params);
        //The email was not sent to campaigners on insert, send it now
        webform_submission_send_mail($node, $submission);
      }
    } else {
      drupal_set_message(variable_get('drupout_message_notready'));
    }
  }
}

function drupout_form_alter(&$form, &$form_state, $form_id) {
  if (_drupout_is_node_enabled($form['#node'])) {
    $form['#submit'][] = '_drupout_redirect_to_speakout';
  }
}

/**
 * Submit handler that redirects to the Speakout campaign
 * if the submitted campaign is set as published
 */
function _drupout_redirect_to_speakout(&$form, &$form_state){
  if ($form['webform_completed']) {
    $params = _drupout_submitted($form['submitted']);
    if ($params['ready_to_publish'][1] == '1') {
      $redirect_url = $params['speakout_link'];
      if (!$redirect_url) {
        $title = $params['civicrm_1_activity_1_activity_subject'];
        $redirect_url = _drupout_speakout_link($title);
      }
      $parsed_redirect_url = drupal_parse_url($redirect_url);
      $redirect = array($parsed_redirect_url['path'], $parsed_redirect_url);
      $form_state['redirect'] = $redirect;
    }
  }
}

/**
 * Login hook: when the user is a youmove campaigner,
 * refresh the youmove campaigns cookie
 */
function drupout_user_login(&$edit, $account) {
  if (in_array('youmove_campaigner', $account->roles)) {
    _drupout_rebuild_cookie($account->uid);
  }
}

/**
 * Set or reset a cookie with the list of edit URLs for all the user submissions,
 * indexed by the speakout campaign id.
 * The cookie is set at the entire domain level, so that Speakout can read it
 * in order to display an edit link when the user is visiting their campaign.
 */
function _drupout_rebuild_cookie($uid) {
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  $node_ids = explode(',', variable_get('drupout_submission_node'));
  $filters = array('nid' => $node_ids, 'uid' => $uid);
  $submissions = webform_get_submissions($filters);
  $nodes = node_load_multiple($node_ids);
  $campaigns = array();
  foreach ($submissions as $submission) {
    $data = drupout_params($nodes[$submission->nid], $submission);
    if (isset($data['campaign_id']) && !empty($data['campaign_id'])) {
      $edit_path = "node/$submission->nid/submission/$submission->sid/edit";
      $campaigns[$data['campaign_id']] = array('edit_url' => url($edit_path, array('absolute' => TRUE)));
    }
  }
  $cookie = array(
    'campaigns' => $campaigns,
    'dashboard_url' => url(t('you/my-campaigns'), array('absolute' => TRUE))
  );
  setcookie('youmove_campaigns', json_encode($cookie), time()+60*60*24*30, '/', '.wemove.eu');
}

/**
 * Deletes the youmove campaigns cookie
 */
function drupout_user_logout($account) {
  if (in_array('youmove_campaigner', $account->roles)) {
    setcookie('youmove_campaigns', '', 0, '/', '.wemove.eu');
  }
}

/**
 * Checks that the submission is ready to publish, block the mail sent to campaigners if not
 */
function drupout_mail_alter(&$message) {
  if (isset($message['params']['node']) && isset($message['params']['submission'])) {
    $node = $message['params']['node'];
    $submission = $message['params']['submission'];
    if (_drupout_is_node_enabled($node)) {
      $params = drupout_params($node, $submission);
      if (isset($params['ready_to_publish']) && $params['ready_to_publish'] != '1') {
        $message['send'] = false;
      }
    }
  }
}

function _drupout_is_node_enabled($node) {
  $node_ids = explode(',', variable_get('drupout_submission_node'));
  return in_array($node->nid, $node_ids);
}

function _drupout_ready_to_publish($form_data) {
  return !isset($form_data['ready_to_publish']) || ($form_data['ready_to_publish'] == '1');
}

/**
 * Call the clone API to create a campaign,
 * and stores the returned campaign id in the submission data
 */
function _drupout_create($node, $submission, $params) {
  $result = _drupout_call_template($params, 'clone');
  if ($result) {
    $camp = json_decode($result['response']);
    $camp_cid = _drupout_find_cid($node, 'campaign_id');
    if ($camp_cid != NULL) {
      $data = array(
        'nid' => $node->webform['nid'],
        'sid' => $submission->sid,
        'cid' => $camp_cid,
        'no' => 0,
        'data' => $camp->id,
      );
      drupal_write_record('webform_submitted_data', $data, array('nid', 'sid', 'cid', 'no'));
    }
  }
  _drupout_rebuild_cookie($submission->uid);
}

/**
 * Call the render API to determine the new campaign fields,
 * and use them to update the campaign
 */
function _drupout_update($params) {
  $result = _drupout_call_template($params, 'render');
  if ($result) {
    $rendered = json_decode($result['response'], true);
    //Restrict the campaign attributes to those affected by the webform submission
    $attrs = array_diff(array_keys($result['input']), array('render_context', 'internal_name', 'slug'));
    $attrs = array_merge($attrs, array_keys($result['input']['render_context']));
    $jsonData = array_intersect_key($rendered, array_flip($attrs));

    $user = variable_get('drupout_speakout_user');
    $password = variable_get('drupout_speakout_password');
    $url = _drupout_api_url("campaigns/".$params['campaign_id']);
    $result = _drupout_curl($url, $jsonData, array(CURLOPT_USERPWD => "$user:$password", CURLOPT_CUSTOMREQUEST => 'PUT'));
    if ($result) {
      $call_info = $result['info'];
      if ($call_info['http_code'] != 200) {
        watchdog('drupout', "Unexpected status code: ".print_r($call_info, true));
      }
    }
  }
}

/**
 * Generic function to call the clone or render API on a campaign template.
 * The call is performed only if the language of the submission has an associated template.
 */
function _drupout_call_template($params, $action) {
  $template_id = drupout_template_id($params['language']);
  if ($template_id != NULL) {
    $jsonData = drupout_form2json($params);
    if ($action == 'clone') {
      $expected_status = 201;
    } else {
      $expected_status = 200;
      unset($jsonData['decisions_attr']);
    }

    $user = variable_get('drupout_speakout_user');
    $password = variable_get('drupout_speakout_password');
    $url = _drupout_api_url("campaigns/$template_id/$action");
    $result = _drupout_curl($url, $jsonData, array(CURLOPT_USERPWD => "$user:$password"));
    if ($result) {
      $call_info = $result['info'];
      if ($call_info['http_code'] != $expected_status) {
        watchdog('drupout', "Unexpected status code: ".print_r($call_info, true));
      } else {
        return $result;
      }
    }
  } else {
    watchdog('drupout', "Cannot $action Speakout template because " . $params['language'] . " is not supported.");
  }
  return false;
}

function _drupout_api_url($path) {
  $root_endpoint = variable_get('drupout_endpoint', 'http://localhost:3000');
  return "$root_endpoint/api/v1/$path";
}

/**
 * Generic curl wrapper for the purposes of this module
 */
function _drupout_curl($url, $data, $opts = NULL) {
  $ch = curl_init($url);

  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json'));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
  $jsonDataEncoded = json_encode($data);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $jsonDataEncoded);
  curl_setopt_array($ch, $opts);

  $response = curl_exec($ch);
  if ($response !== false) {
    $call_info = curl_getinfo($ch);
    $result = array('input' => $data, 'response' => $response, 'info' => $call_info);
  } else {
    $error = curl_error($ch);
    watchdog('drupout', "Unable to call $url: $error");
    $result = false;
  }

  curl_close($ch);
  return $result;
}

function _drupout_find_cid($node, $key) {
  foreach ($node->webform['components'] as $cid => $component) {
    if ($component['form_key'] == $key) {
      return $cid;
    }
  }
  return NULL;
}

/**
 * Creates the item in the admin main page
 */
function drupout_menu() {
  $items = array();

  $items['admin/config/content/drupout'] = array(
    'title' => "Drupout settings",
    'description' => "Settings to create Speakout campaigns from Drupal",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drupout_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM
  );

  return $items;
}

/**
 * Generates the config form
 */
function drupout_settings_form($form, &$form_state) {
  $form['drupout_submission_node'] = array(
    '#type' => 'textfield',
    '#title' => t('Submission node'),
    '#default_value' => variable_get('drupout_submission_node'),
    '#description' => t('Drupal node ids (comma-separated) with the webform to create/edit campaigns'),
    '#required' => true
  );

  $form['drupout_messages'] = array(
    '#type' => 'fieldset',
    '#title' => t('Confirmation messages'),
    '#collapsible' => false
  );
  $form['drupout_messages']['drupout_message_notready'] = array(
    '#type' => 'textarea',
    '#title' => t('Submission not ready to publish'),
    '#default_value' => variable_get('drupout_message_notready'),
  );
  $form['drupout_messages']['drupout_message_notcreated'] = array(
    '#type' => 'textarea',
    '#title' => t('The campaign was not created (language not supported)'),
    '#default_value' => variable_get('drupout_message_notcreated'),
  );

  $form['drupout_endpoint'] = array(
    '#type' => 'textfield',
    '#title' => t('Speakout URL'),
    '#default_value' => variable_get('drupout_endpoint', 'http://localhost:3000'),
    '#description' => t('URL to the Speakout application, without trailing slash'),
    '#required' => true
  );
  $form['drupout_speakout_user'] = array(
    '#type' => 'textfield',
    '#title' => t('Speakout user'),
    '#default_value' => variable_get('drupout_speakout_user'),
    '#description' => t('Speakout user'),
    '#required' => true
  );
  $form['drupout_speakout_password'] = array(
    '#type' => 'password',
    '#title' => t('Speakout password'),
    '#description' => t('Speakout password, leave blank if unchanged'),
    '#value_callback' => 'drupout_pwd_value'
  );
  $form['drupout_speakout_templates'] = array(
    '#type' => 'textfield',
    '#title' => t('Speakout templates'),
    '#default_value' => variable_get('drupout_speakout_templates'),
    '#description' => t('Speakout templates'),
    '#required' => true
  );
  $form['drupout_org_layout'] = array(
    '#type' => 'textfield',
    '#title' => t('Organisation layout id'),
    '#default_value' => variable_get('drupout_org_layout'),
    '#description' => t('Custom layout id for organisations'),
    '#required' => false
  );

  return system_settings_form($form);
}

function drupout_pwd_value($element, $input = FALSE, &$form_state) {
  if (!$input) {
    $input = variable_get('drupout_speakout_password');
  }
  return $input;
}

/**
 * Returns the supported language options according to settings
 */
function drupout_youmove_languages() {
  $languages = array(
    'da' => t('Danish'),
    'de' => t('German'),
    'el' => t('Greek'),
    'en' => t('English'),
    'es' => t('Spanish'),
    'fr' => t('French'),
    'hu' => t('Hungarian'),
    'it' => t('Italian'),
    'nl' => t('Dutch'),
    'pl' => t('Polish'),
    'pt' => t('Portuguese'),
  );
  $available = drupout_language_templates();
  return array_intersect_key($languages, $available);
}

function drupout_webform_select_options_info() {
  $items = array();

  $items['youmove_langs'] = array(
    'title' => t('Youmove languages'),
    'options callback' => 'drupout_youmove_languages',
  );

  return $items;
}

function drupout_token_info() {
  $info['types']['drupout'] = array(
    'name' => 'Drupout',
    'needs-data' => 'submission',
  );
  $info['tokens']['submission']['drupout'] = array(
    'name' => 'Drupout',
    'type' => 'drupout'
  );
  $info['tokens']['drupout']['confirm_msg'] = array(
    'name' => 'Confirmation message',
    'description' => t('A form confirmation message that depends on whether it is ready to be published and whether its language is supported.'),
  );

  return $info;
}

function drupout_tokens($type, $tokens, $data, $options) {
  $replacements = array();
  if ($type == 'submission') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'drupout:confirm_msg':
          $node = $data['node'];
          $submission = $data['webform-submission'];
          $params = drupout_params($node, $submission);
          if (isset($params['ready_to_publish']) && $params['ready_to_publish'] != '1') {
            $replacement = variable_get('drupout_message_notready');
          } else {
            $template_id = drupout_template_id($params['language']);
            if ($template_id != NULL) {
              $replacement = '';
            } else {
              $replacement = variable_get('drupout_message_notcreated');
            }
          }
          $replacements[$original] = $replacement;
          break;
      }
    }
  }
  return $replacements;
}

function drupout_variable_info($options) {
  $variables['drupout_message_notready'] = array(
    'title' => t('Submission not ready to publish'),
    'type' => 'string',
  );
  $variables['drupout_message_notcreated'] = array(
    'title' => t('The campaign was not created (language not supported)'),
    'type' => 'string',
  );
  return $variables;
}

function drupout_block_info() {
  return [
    'member_count' => [
      'info' => 'Join the movement of'
    ]
  ];
}

function drupout_block_view($delta) {
  if ($cache = cache_get('wemove_members_count')) {
    $count = $cache->data;
  } else {
    civicrm_initialize();
    $count = civicrm_api3('GroupContact', 'getcount', array('group_id' => 42, 'status' => 'Added'));
    cache_set('wemove_members_count', $count, 'cache', time() + 60 * 60 * 24);
  }

  $members = "<span class=\"blue\">$count</span>";
  $url = 'https://act.wemove.eu/campaigns/join-wemove';
  $label = t('Join the movement of !members europeans', ['!members' => $members]);

  return [
    'content' => [
      '#type' => 'markup',
      '#markup' => "<span id=\"join-counter\"><a href=\"$url\">$label</a></span>",
    ]
  ];
}
